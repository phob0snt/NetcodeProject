// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Services.Authentication
{
    public static class AuthenticationErrorCodes
    {
        public static readonly int AccountAlreadyLinked = 10003;
        public static readonly int AccountLinkLimitExceeded = 10004;
        public static readonly int ClientInvalidProfile = 10006;
        public static readonly int ClientInvalidUserState = 10000;
        public static readonly int ClientNoActiveSession = 10001;
        public static readonly int ClientUnlinkExternalIdNotFound = 10005;
        public static readonly int InvalidParameters = 10002;
        public static readonly int InvalidSessionToken = 10007;
        public static readonly int MinValue = 10000;
    }

    public sealed class AuthenticationException : Unity.Services.Core.RequestFailedException
    {
        public static Unity.Services.Core.RequestFailedException Create(int errorCode, string message, System.Exception innerException = default(System.Exception));
    }

    public static class AuthenticationExtensions
    {
        public static Unity.Services.Core.InitializationOptions SetProfile(this Unity.Services.Core.InitializationOptions options, string profile);
    }

    public static class AuthenticationService
    {
        public static IAuthenticationService Instance { get; }
    }

    public interface IAuthenticationService
    {
        public event System.Action Expired;
        public event System.Action SignedIn;
        public event System.Action SignedOut;
        public event System.Action<Unity.Services.Core.RequestFailedException> SignInFailed;
        public string AccessToken { get; }
        public bool IsAuthorized { get; }
        public bool IsExpired { get; }
        public bool IsSignedIn { get; }
        public string PlayerId { get; }
        public PlayerInfo PlayerInfo { get; }
        public string PlayerName { get; }
        public string Profile { get; }
        public bool SessionTokenExists { get; }
        public System.Threading.Tasks.Task AddUsernamePasswordAsync(string username, string password);
        public void ClearSessionToken();
        public System.Threading.Tasks.Task DeleteAccountAsync();
        public System.Threading.Tasks.Task<PlayerInfo> GetPlayerInfoAsync();
        public System.Threading.Tasks.Task<string> GetPlayerNameAsync();
        public System.Threading.Tasks.Task LinkWithAppleAsync(string idToken, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithAppleGameCenterAsync(string signature, string teamPlayerId, string publicKeyURL, string salt, System.UInt64 timestamp, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithFacebookAsync(string accessToken, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithGoogleAsync(string idToken, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithGooglePlayGamesAsync(string authCode, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithOculusAsync(string nonce, string userId, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithOpenIdConnectAsync(string idProviderName, string idToken, LinkOptions options = default(LinkOptions));
        [System.Obsolete(@"This method is deprecated as of version 2.7.1. Please use the LinkWithSteamAsync method with the 'identity' parameter for better security.")] public System.Threading.Tasks.Task LinkWithSteamAsync(string sessionTicket, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithSteamAsync(string sessionTicket, string identity, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task LinkWithUnityAsync(string token, LinkOptions options = default(LinkOptions));
        public System.Threading.Tasks.Task SignInAnonymouslyAsync(SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithAppleAsync(string idToken, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithAppleGameCenterAsync(string signature, string teamPlayerId, string publicKeyURL, string salt, System.UInt64 timestamp, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithFacebookAsync(string accessToken, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithGoogleAsync(string idToken, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithGooglePlayGamesAsync(string authCode, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithOculusAsync(string nonce, string userId, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithOpenIdConnectAsync(string idProviderName, string idToken, SignInOptions options = default(SignInOptions));
        [System.Obsolete(@"This method is deprecated as of version 2.7.1. Please use the SignInWithSteamAsync method with the 'identity' parameter for better security.")] public System.Threading.Tasks.Task SignInWithSteamAsync(string sessionTicket, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithSteamAsync(string sessionTicket, string identity, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithUnityAsync(string token, SignInOptions options = default(SignInOptions));
        public System.Threading.Tasks.Task SignInWithUsernamePasswordAsync(string username, string password);
        public void SignOut(bool clearCredentials = false);
        public System.Threading.Tasks.Task SignUpWithUsernamePasswordAsync(string username, string password);
        public void SwitchProfile(string profile);
        public System.Threading.Tasks.Task UnlinkAppleAsync();
        public System.Threading.Tasks.Task UnlinkAppleGameCenterAsync();
        public System.Threading.Tasks.Task UnlinkFacebookAsync();
        public System.Threading.Tasks.Task UnlinkGoogleAsync();
        public System.Threading.Tasks.Task UnlinkGooglePlayGamesAsync();
        public System.Threading.Tasks.Task UnlinkOculusAsync();
        public System.Threading.Tasks.Task UnlinkOpenIdConnectAsync(string idProviderName);
        public System.Threading.Tasks.Task UnlinkSteamAsync();
        public System.Threading.Tasks.Task UnlinkUnityAsync();
        public System.Threading.Tasks.Task UpdatePasswordAsync(string currentPassword, string newPassword);
        public System.Threading.Tasks.Task<string> UpdatePlayerNameAsync(string name);
    }

    public sealed class Identity
    {
        public string TypeId;
        public string UserId;
    }

    public sealed class LinkOptions
    {
        public bool ForceLink { get; set; }
        public LinkOptions() {}
    }

    public sealed class PlayerInfo
    {
        public System.Nullable<System.DateTime> CreatedAt { get; }
        public string Id { get; }
        public System.Collections.Generic.List<Identity> Identities { get; }
        [JetBrains.Annotations.CanBeNull] public System.Nullable<System.DateTime> LastPasswordUpdate { get; }
        [JetBrains.Annotations.CanBeNull] public string Username { get; }
        public string GetAppleGameCenterId();
        public string GetAppleId();
        public string GetFacebookId();
        public string GetGoogleId();
        public string GetGooglePlayGamesId();
        public string GetOculusId();
        public string GetOpenIdConnectId(string idProviderName);
        public System.Collections.Generic.List<Identity> GetOpenIdConnectIdProviders();
        public string GetSteamId();
        public string GetUnityId();
    }

    public sealed class SignInOptions
    {
        public bool CreateAccount { get; set; }
        public SignInOptions() {}
    }
}
