
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine.Scripting;
using Unity.Services.Authentication.Shared;

namespace Unity.Services.Authentication.Generated
{
    /// <summary>
    /// Additional detail about an error.  For example, this might include detailed validation failure messages, debugging information, and troubleshooting steps.
    /// </summary>
    [DataContract(Name = "Detail")]
    [Preserve]
    internal partial class Detail
    {
        /// <summary>
        /// Gets or Sets ErrorType
        /// </summary>
        [DataMember(Name = "errorType", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public string ErrorType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public string Message { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Detail" /> class.
        /// </summary>
        /// <param name="errorType">errorType (required).</param>
        /// <param name="message">message (required).</param>
        [Preserve]
        public Detail(string errorType = default(string), string message = default(string))
        {
            // to ensure "errorType" is required (not null)
            if (errorType == null)
            {
                throw new ArgumentNullException("errorType is a required property for Detail and cannot be null");
            }
            this.ErrorType = errorType;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for Detail and cannot be null");
            }
            this.Message = message;
        }
    }

}
