//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Relay.Http;



namespace Unity.Services.Relay.Models
{
    /// <summary>
    /// JoinAllocationAllOf model
    /// </summary>
    [Preserve]
    [DataContract(Name = "JoinAllocation_allOf")]
    public class JoinAllocationAllOf
    {
        /// <summary>
        /// Creates an instance of JoinAllocationAllOf.
        /// </summary>
        /// <param name="hostConnectionData">A base64-encoded representation of an encrypted connection data blob describing the allocation and Relay server of the player who created the join code. Connecting players can use this data to establish communication with the host player.</param>
        [Preserve]
        public JoinAllocationAllOf(byte[] hostConnectionData)
        {
            HostConnectionData = hostConnectionData;
        }

        /// <summary>
        /// A base64-encoded representation of an encrypted connection data blob describing the allocation and Relay server of the player who created the join code. Connecting players can use this data to establish communication with the host player.
        /// </summary>
        [Preserve]
        [DataMember(Name = "hostConnectionData", IsRequired = true, EmitDefaultValue = true)]
        public byte[] HostConnectionData{ get; }
    
        /// <summary>
        /// Formats a JoinAllocationAllOf into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (HostConnectionData != null)
            {
                serializedModel += "hostConnectionData," + HostConnectionData.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a JoinAllocationAllOf as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (HostConnectionData != null)
            {
                var hostConnectionDataStringValue = HostConnectionData.ToString();
                dictionary.Add("hostConnectionData", hostConnectionDataStringValue);
            }
            
            return dictionary;
        }
    }
}
