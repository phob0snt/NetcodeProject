//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Relay.Http;



namespace Unity.Services.Relay.Models
{
    /// <summary>
    /// A request to create a join code.
    /// </summary>
    [Preserve]
    [DataContract(Name = "JoinCodeRequest")]
    public class JoinCodeRequest
    {
        /// <summary>
        /// A request to create a join code.
        /// </summary>
        /// <param name="allocationId">The UUID of the allocation. The Allocations service maps this allocation ID to the generated join code.  The Allocations service shares the allocation connection data with players who use the join code with the &#x60;/join&#x60; endpoint. This sharing mechanism establishes communication between players via the Relay server data protocol.</param>
        [Preserve]
        public JoinCodeRequest(System.Guid allocationId)
        {
            AllocationId = allocationId;
        }

        /// <summary>
        /// The UUID of the allocation. The Allocations service maps this allocation ID to the generated join code.  The Allocations service shares the allocation connection data with players who use the join code with the &#x60;/join&#x60; endpoint. This sharing mechanism establishes communication between players via the Relay server data protocol.
        /// </summary>
        [Preserve]
        [DataMember(Name = "allocationId", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid AllocationId{ get; }
    
        /// <summary>
        /// Formats a JoinCodeRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (AllocationId != null)
            {
                serializedModel += "allocationId," + AllocationId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a JoinCodeRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (AllocationId != null)
            {
                var allocationIdStringValue = AllocationId.ToString();
                dictionary.Add("allocationId", allocationIdStringValue);
            }
            
            return dictionary;
        }
    }
}
